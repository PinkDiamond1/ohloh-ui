# frozen_string_literal: true

require 'test_helper'

describe Vulnerability do
  describe '.details' do
    let(:release) { create(:release) }
    let(:low_vulnerability) { create(:vulnerability, severity: 0) }
    let(:medium_vulnerability) { create(:vulnerability, severity: 1) }
    let(:high_vulnerability) { create(:vulnerability, severity: 2) }
    let(:unknown_severity) { create(:vulnerability, severity: nil) }

    before do
      release.vulnerabilities << low_vulnerability
      release.vulnerabilities << medium_vulnerability
      release.vulnerabilities << high_vulnerability
      release.vulnerabilities << unknown_severity
    end

    it 'should return all the vulnerabilities for a release' do
      _(Vulnerability.details(release.id)).must_include unknown_severity
      _(Vulnerability.details(release.id)).must_include low_vulnerability
      _(Vulnerability.details(release.id)).must_include medium_vulnerability
      _(Vulnerability.details(release.id)).must_include high_vulnerability
    end

    it 'should return the vulnerabilities with low severity for a release' do
      _(Vulnerability.details(release.id, filter: { severity: 'low' })).must_equal [low_vulnerability]
    end

    it 'should return the vulnerabilities with medium severity for a release' do
      _(Vulnerability.details(release.id, filter: { severity: 'medium' })).must_equal [medium_vulnerability]
    end

    it 'should return the vulnerabilities with high severity for a release' do
      _(Vulnerability.details(release.id, filter: { severity: 'high' })).must_equal [high_vulnerability]
    end

    it 'should return the vulnerabilities with null severity for a release' do
      _(Vulnerability.details(release.id, filter: { severity: 'unknown_severity' })).must_equal [unknown_severity]
    end
  end
end
